name: java-maven-build-push-container-docker
on:
  workflow_call:
    inputs:
      gcpProjectId: 
        description: 'The GCP project id hosting the container repository'
        required: true
        type: string
      containerImageName: 
        description: 'The image name, including repository prefix. Example: europe-docker.pkg.dev/<project>/<repository>/myImage:latest'
        required: true
        type: string
      repositoryFolder: 
        description: "The code repository folder to build. '.' for the root folder, './folder1/mavenRoot/' for a sub-folder"
        default: '.'
        required: false
        type: string
      javaVersion:
        description: 'The Java version to build and deploy. Default is Java17'
        default: '17'
        required: false
        type: string
    secrets:
      gcpCredentials:
        description: 'The GCP credentials/certificate to use for publishing the container image'
        required: true
jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ inputs.javaVersion }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ inputs.javaVersion }}
          distribution: 'temurin'
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.gcpCredentials }}
          project_id: ${{ inputs.gcpProjectId }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ inputs.gcpProjectId }}
      - name: Setup artifactory auth
        run: gcloud auth configure-docker europe-docker.pkg.dev
      - name: Get module/project version
        run: echo ::set-output name=version::$(mvn -f ${{ inputs.repositoryFolder }} -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - name: Build and publish image with Maven and Jib
        run: |
          mvn --update-snapshots --batch-mode -f ${{ inputs.repositoryFolder }} compile test jib:build \
            -Dimage=${{ inputs.containerImageName }} \
            -Djib.to.tags=latest,$GITHUB_SHA,${{ steps.project.outputs.version }}